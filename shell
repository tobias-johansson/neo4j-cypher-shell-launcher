#!/bin/bash
set -e
# set -x

script_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
pushd "$script_dir" > /dev/null

c_red='\033[0;31m'
c_res='\033[0m'
log() { echo -e "$@" 1>&2; }
err() { log "${c_red}${@}${c_res}"; }
die() { err "$@"; exit 1; }

args=("$@")

layers=()
command=()
for arg in ${args[@]}; do
  if [[ "$arg" = @* ]]; then
    layers+=(${arg:1})
  else
    command+=($arg)
  fi
done

config_file="${script_dir}/config/config.sh"
auth_file="${script_dir}/config/auth.sh"

shell_default_layers=("latest")
shell_tc_dev_build="Neo4jDev_Docker_DockerDebian"
export shell_tc_dev_build

[[ -f "$config_file" ]] && source "$config_file" || err "No config file at $config_file"
[[ -f "$auth_file"   ]] && source "$auth_file"   || err "No auth file at $auth_file"

[ ${#layers[@]} -eq 0  ] && layers=("${shell_default_layers[@]}")
[ ${#command[@]} -eq 0 ] && command=("run")

project="shell"
files=("-f docker-compose.yml")
for layer in ${layers[@]}; do
  project="${project}-${layer}"
  files+=("-f docker-compose.${layer}.yml")
done
project=$(echo "${project}" | tr -d '.')

dkc="docker-compose -p ${project} ${files[@]}"

show_config() {
  log "project: ${project}"
  log "layers: ${layers[@]}"
  log "command: ${command[@]}"
  log "files: ${files[@]}"
  $dkc config | yq e '.services.neo4j' - 1>&2
}

shell() {
  for i in $(seq 1 10); do 
    [ $i -gt 1 ] && sleep 1
    $dkc exec neo4j cypher-shell -u neo4j -p password && s=0 && break || s=$?
  done
  (exit $s)
}

tc_url="https://live.neo4j-build.io/app/rest"

tc() {
  [[ -z "$shell_tc_token" ]] && die "Please set shell_tc_token in $auth"

  path="$1"; shift
  curl -L \
      --header "Authorization: Bearer $shell_tc_token" \
      --header "Accept: application/json" \
      $@ \
      "$tc_url/$path"
}

fetch() {
  build=${1:-$shell_tc_dev_build}

  id=$(tc "builds/buildType:$build,status:SUCCESS,count:1/" "-s" \
          | jq -r '.id')
  file=$(tc "builds/id:$id/artifacts/children/" "-s" \
          | jq -r '.file[] | .name' | grep 'neo4j-enterprise' | grep 'loadable')
  path="builds/id:$id/artifacts/content/$file"
  log "Fetching $tc_url/$path"
  image=$(tc "$path" \
          | docker load -q | tail -n 1 | cut -d ' ' -f 3)
  docker image tag "$image" "neo4j:$build"
}


main() {
  cd -- "$(dirname "$0")"
  case "${command[@]}" in
      run)
          show_config
          $dkc up --build --detach
          shell
          ;;
      up)
          show_config
          $dkc up --build --detach
          ;;
      down)
          show_config
          $dkc down --volumes
          ;;
      bash)
          show_config
          $dkc exec neo4j bash
          ;;
      fetch*)
          fetch ${@:2}
          ;;
      ps)
          show_config
          $dkc ps --all
          ;;
      pss)
          projects=$(docker ps -a --format '{{.ID}}' \
                    | xargs docker inspect \
                    | jq -r '.[] | .Config.Labels["com.docker.compose.project"]' \
                    | sort -i -u \
                    | grep "^shell")
          for proj in $projects; do
            echo "--- $proj"
            docker ps --filter "label=com.docker.compose.project=$proj"
          done
          ;;
      *)
          show_config
          $dkc ${command[@]}
  esac
}

main $@